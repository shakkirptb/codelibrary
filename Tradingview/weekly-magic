//@version=4
strategy(title="Weekly Magic", shorttitle="Weekly Magic", overlay=true)

skipInterval =  input(title="Calculate for the whole time", type=input.bool, defval=true, tooltip = "ignore the time interval")
ignoreSaturday =  input(title="Ignore Saturday", type=input.bool, defval=true, tooltip = "do not consider saturday as end of week")

// Make input options that configure backtest date range
startDate = input(title="Start Date", type=input.integer, defval=1, minval=1, maxval=31)
startMonth = input(title="Start Month", type=input.integer, defval=1, minval=1, maxval=12)
startYear = input(title="Start Year", type=input.integer, defval=2020, minval=1800, maxval=2100)

endDate = input(title="End Date", type=input.integer, defval=1, minval=1, maxval=31)
endMonth = input(title="End Month", type=input.integer, defval=12, minval=1, maxval=12)
endYear = input(title="End Year", type=input.integer, defval=2021, minval=1800, maxval=2100)
inDateRange = time >= timestamp(syminfo.timezone, startYear, startMonth, startDate, 0, 0) and 
   time < timestamp(syminfo.timezone, endYear, endMonth, endDate, 0, 0)

histOpen(days) =>
    security(syminfo.tickerid, "D", open[days], lookahead=barmerge.lookahead_on)
histClose(days) =>
    security(syminfo.tickerid, "D", close[days], lookahead=barmerge.lookahead_on)

lastClose = histClose(1)
lastOpen = histOpen(1)

_green = 1
_unch = 0
_red = -1

ocd = close - open
ocdLast = lastClose - lastOpen

candleSize = abs(ocd)
lastCandleSize = abs(ocdLast)

candleColorToday =  ocd >= 0 ? _green : _red 
candleColorPrev = ocdLast > 0 ? _green : _red

biggerBodyThanLastDay = candleSize > lastCandleSize
candleSizeToPrev = (candleSize/lastCandleSize)*100
lastCandleSizeToToday = (lastCandleSize/candleSize)*100

redToGreen = candleColorPrev == _red and candleColorToday == _green
greenToRed = candleColorPrev == _green and candleColorToday == _red
greenGreen = candleColorPrev == _green and candleColorToday == _green
redRed = candleColorPrev == _red and candleColorToday == _red

reversalCurvePercent = input(title="size reduction for trend shift (%)", type=input.integer, defval=25, tooltip = "how much a candle body size has to drop from the prev candle size to be treated as a trend shift")
comparableCandleSize = input(title="comparable candle size (%)", type=input.integer, defval=40,tooltip = "candle body size to previous candle to be qualify as a continuation of current trend")

bullishCurve = candleSizeToPrev <= reversalCurvePercent and close > lastClose
bearishCurve = candleSizeToPrev <= reversalCurvePercent and close < lastClose

equalGreen = greenGreen and candleSizeToPrev >= comparableCandleSize
equalRed = redRed and candleSizeToPrev >= comparableCandleSize

bulling = (redRed and bullishCurve) or redToGreen //or equalGreen
bearing = (greenGreen and bearishCurve) or greenToRed //or equalRed

//var dayNum = dayNum == na ?  0 : dayNum
//offFriday = dayofweek == dayofweek.monday and dayNum != 5 ? 0 : 
//dayNum = dayofweek == dayofweek.monday ? 1 : dayofweek == dayofweek.thursday ? 4 : dayofweek == dayofweek.friday ? 5 : 2

isMonday = dayofweek == dayofweek.monday
isTuesday = dayofweek == dayofweek.tuesday
isWednesday = dayofweek == dayofweek.wednesday
isThursday = dayofweek == dayofweek.thursday
isFriday = dayofweek == dayofweek.friday
isSaturday = dayofweek == dayofweek.saturday


wasMondayOff = isTuesday and dayofweek[1] != dayofweek.monday
isOpeningDayOfWeek = isMonday or wasMondayOff
wasEndOfWeekOff = isOpeningDayOfWeek and (dayofweek[1] == dayofweek.thursday)
isClosingDayOfWeek = (not ignoreSaturday and isSaturday) or isFriday

closingDayOfWeek = isOpeningDayOfWeek ? dayofweek[1] : isTuesday ? dayofweek[2] : dayofweek.friday
openingDayOfWeek = isOpeningDayOfWeek ? dayofweek : isTuesday ? dayofweek[1] : dayofweek.monday

isBuyCheckpoint =  isClosingDayOfWeek// or (isOpeningDayOfWeek and closingDayOfWeek == dayofweek.thursday) 
isSellCheckpoint = not isMonday and not isTuesday and not(openingDayOfWeek == dayofweek.tuesday and isWednesday)


if skipInterval or inDateRange
    if isSellCheckpoint and bearing
        strategy.close_all()
    if isBuyCheckpoint and bulling
        strategy.order("buy", true)


plot(strategy.position_size, "position", #000055, 2)

//paint the days of week
c = color.black
color_thurday = color.new(c, 85)
color_friday = color.new(c, 80)
color_saturday = #aa0000
color_monday = #00aa00
color_tuesday = #0000aa
color_other = color.new(color.white, 0)
bgColor = isThursday ? color_thurday : 
   isFriday ? color_friday : 
   isSaturday ? color_saturday : 
   isMonday ? color_monday : 
   wasMondayOff ? color_tuesday : color_other
bgcolor(color=bgColor)

